{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\XPS\\\\Desktop\\\\Projet_Mobile\\\\MoviesAndMe\\\\Animations\\\\EnlargeShrink.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\n\nvar EnlargeShrink = function (_React$Component) {\n  _inherits(EnlargeShrink, _React$Component);\n\n  var _super = _createSuper(EnlargeShrink);\n\n  function EnlargeShrink(props) {\n    var _this;\n\n    _classCallCheck(this, EnlargeShrink);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      viewSize: new Animated.Value(_this._getSize())\n    };\n    return _this;\n  }\n\n  _createClass(EnlargeShrink, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      Animated.spring(this.state.viewSize, {\n        toValue: this._getSize()\n      }).start();\n    }\n  }, {\n    key: \"_getSize\",\n    value: function _getSize() {\n      if (this.props.shouldEnlarge) {\n        return 80;\n      }\n\n      return 40;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Animated.View, {\n        style: {\n          height: this.state.viewSize,\n          width: this.state.viewSize\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return EnlargeShrink;\n}(React.Component);\n\nexport default EnlargeShrink;","map":{"version":3,"sources":["C:/Users/XPS/Desktop/Projet_Mobile/MoviesAndMe/Animations/EnlargeShrink.js"],"names":["React","EnlargeShrink","props","state","viewSize","Animated","Value","_getSize","spring","toValue","start","shouldEnlarge","height","width","children","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;IAGMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AACTC,MAAAA,QAAQ,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,MAAKC,QAAL,EAAnB;AADD,KAAX;AAFgB;AAKjB;;;;yCAImB;AAClBF,MAAAA,QAAQ,CAACG,MAAT,CACE,KAAKL,KAAL,CAAWC,QADb,EAEE;AACEK,QAAAA,OAAO,EAAE,KAAKF,QAAL;AADX,OAFF,EAKEG,KALF;AAOD;;;+BAES;AACR,UAAG,KAAKR,KAAL,CAAWS,aAAd,EAA4B;AAC1B,eAAO,EAAP;AACD;;AACD,aAAO,EAAP;AACD;;;6BAEO;AACN,aACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWC,QAApB;AAA8BS,UAAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC;AAAhD,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWY,QADd,CADF;AAKD;;;;EAjCyBd,KAAK,CAACe,S;;AAqClC,eAAed,aAAf","sourcesContent":["import React from 'react'\r\nimport {Animated} from 'react-native'\r\n\r\nclass EnlargeShrink extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      viewSize: new Animated.Value(this._getSize())\r\n    }\r\n  }\r\n\r\n  // La méthode componentDidUpdate est exécuté chaque fois que le component est mise à jour,\r\n  //c'est l'endroit parfait pour lancer / relancer notre animation.\r\n  componentDidUpdate(){\r\n    Animated.spring(\r\n      this.state.viewSize,\r\n      {\r\n        toValue: this._getSize()\r\n      }\r\n    ).start()\r\n\r\n  }\r\n\r\n  _getSize(){\r\n    if(this.props.shouldEnlarge){\r\n      return 80\r\n    }\r\n    return 40\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Animated.View style={{height: this.state.viewSize, width: this.state.viewSize}}>\r\n        {this.props.children}\r\n      </Animated.View>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default EnlargeShrink\r\n"]},"metadata":{},"sourceType":"module"}